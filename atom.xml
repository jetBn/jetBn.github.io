<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jetbn.github.io/"/>
  <updated>2020-04-29T04:16:40.479Z</updated>
  <id>http://jetbn.github.io/</id>
  
  <author>
    <name>jetBn</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue3.0尝试</title>
    <link href="http://jetbn.github.io/2020/04/29/Vue3-0%E5%B0%9D%E8%AF%95/"/>
    <id>http://jetbn.github.io/2020/04/29/Vue3-0%E5%B0%9D%E8%AF%95/</id>
    <published>2020-04-29T02:59:17.000Z</published>
    <updated>2020-04-29T04:16:40.479Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://user-gold-cdn.xitu.io/2020/1/13/16f9e71255c62bc0?w=299&h=300&f=png&s=43799" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr><p>&ensp;&ensp;&ensp;&ensp;有关vue2的相关相关语法我相信大家都已经的语法我相信大家都已经会了，现在都已经<code>2020</code>年了vue作为前端这么热门的框架, 不去学一波对的自己是做前端的吗？哈哈哈哈🤣🤣🤣。<br/><br>&ensp;&ensp;&ensp;&ensp;一路就开始折腾，那是一路曲折啊，重不会到会也不知道自己经历了什么，到现在<code>vue3.x</code>马上又有开始了所以自己也是先试试水，玩了一波相关的语法。<br/><br>&ensp;&ensp;&ensp;&ensp; 废话不多说直接上代码记录下(由于本人没有用到<code>TS</code>所以都是进行与<code>ES6</code>进行)</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><ol><li>在<code>vue-cli3.0</code>下安装 <code>composition-api</code> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install @vue&#x2F;composition-api --save</span><br><span class="line"># OR</span><br><span class="line">yarn add @vue&#x2F;composition-api</span><br></pre></td></tr></table></figure></li><li>在使用任何 <code>@vue/composition-api</code> 提供的能力前，必须先通过 Vue.use() 进行安装 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import VueCompositionApi from &#39;@vue&#x2F;composition-api&#39;</span><br><span class="line"></span><br><span class="line">Vue.use(VueCompositionApi)</span><br></pre></td></tr></table></figure> 安装完成后就可项目中使用相关<code>composition-api</code>来开发了</li></ol><h2 id="setup（入口函数）"><a href="#setup（入口函数）" class="headerlink" title="setup（入口函数）"></a>setup（入口函数）</h2><p>&ensp;&ensp;&ensp;&ensp;<code>setup()</code>函数是<code>vue3</code>中，专门为组件提供的新属性，感觉就跟是跟<code>vue2.x</code>中的<code>data</code>一样需要返回一个<code>Object</code>中包含了自己定义的<code>function</code>, <code>computed</code>, <code>watch</code>以及属性和生命周期。</p><ol><li><p>setup 函数会在 beforeCreate 之后、created 之前执行。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">setup(props, context) &#123;</span><br><span class="line">    const state &#x3D; reactive(&#123;count: 0&#125;) &#x2F;&#x2F; 创建数据</span><br><span class="line">    return state &#x2F;&#x2F; 返回页面中使用</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接收<code>props</code>数据</p><ol><li>在<code>props</code>中定义当前组件允许外界传递过来的参数名称：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> props: &#123;</span><br><span class="line">    name: String</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>通过<code>setup</code>函数的第一个形参，接收 props 数据： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setup(props) &#123;</span><br><span class="line">    console.log(props.name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>context形参</p><p> <code>setup</code>函数的第二个形参是一个上下文对象，就是<code>vue2.x</code>中的<code>this</code>，在<code>vue 3.x</code>中，它们的访问方式如下</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> setup(props, context) &#123;</span><br><span class="line">    context.slots</span><br><span class="line">    context.emit</span><br><span class="line">    context.refs</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="reactive与ref（响应式数据源）"><a href="#reactive与ref（响应式数据源）" class="headerlink" title="reactive与ref（响应式数据源）"></a>reactive与ref（响应式数据源）</h2><ol><li><p><code>reactive()</code>函数接收一个普通的对象，返回一个响应的数据对象。</p><p> 这等价于<code>vue2.x</code>中的<code>Vue.observable()</code>函数，<code>vue3.x</code>然后就是可以直接用reactive()函数直接创建响应的数据对象。</p><ol><li><p>按需导入<code>reactive</code>相关函数</p><p> <code>import { reactive } from &#39;@vue/composition-api&#39;</code></p></li><li><p>在<code>setup()</code>的函数中调用<code>reactive()</code>函数，创建对应的响应式数据对象</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">setup() &#123;</span><br><span class="line">    &#x2F;&#x2F; 这个类似于vue2中的data()返回的响应式对象</span><br><span class="line">    const state &#x3D; reactive(&#123; count: 0 &#125;) </span><br><span class="line">    return state</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<code>template</code>中访问响应式数据</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;span&gt;当前的count值为:&#123;&#123;count&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure></li></ol></li><li><p><code>ref()</code>函数用来根据给定值创建一个响应式的数据对象，<code>ref()</code>函数的调用返回值是一个对象，这个对象上只包含一个<code>value</code>属性。</p><ol><li><p>导入相关<code>ref</code>相关函数</p><p> <code>import { ref } from &#39;@vue/composition-api&#39;</code></p></li><li><p>创建响应式对象</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">setup() &#123;</span><br><span class="line">    const count &#x3D; ref(0)</span><br><span class="line">        return &#123;</span><br><span class="line">            count,</span><br><span class="line">            name: ref(&#39;vue&#39;)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>在<code>template</code>中访问响应式数据<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;span&gt;&#123;&#123;count&#125;&#125;--- &#123;&#123;name&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ol></li><li><p><code>isRef</code>的使用<br> ，<code>isRef()</code>函数主要用来判断某个值是否为<code>ref()</code>创建出来的对象；应用场景：当需要展开某个可能为<code>ref()</code>创建出来的值得时候，例如：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#123; isRef &#125; from &#39;@vue&#x2F;composition-api&#39;</span><br><span class="line"></span><br><span class="line">const fooData &#x3D; isRef(foo) ? foo.value : foo</span><br></pre></td></tr></table></figure></li><li><p><code>toRefs</code>的使用，<code>toRefs()</code>函数可以将<code>reactive()</code>创建出来的响应式对象，转为普通对象，只不过这个对象上的属性节点都是以<code>ref()</code>类型的像是数据， 最常见应用场景</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import &#123; toRefs, reactive &#125; from &#39;@vue&#x2F;composition-api&#39;</span><br><span class="line"></span><br><span class="line">setup() &#123;</span><br><span class="line">    &#x2F;&#x2F; 定义响应式数据对象</span><br><span class="line">    const state &#x3D; reactive(&#123;</span><br><span class="line">      count: 0</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 定义页面上可用的事件处理函数</span><br><span class="line">    const increment &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 在 setup 中返回一个对象供页面使用</span><br><span class="line">    &#x2F;&#x2F; 这个对象中可以包含响应式的数据，也可以包含事件处理函数</span><br><span class="line">    return &#123;</span><br><span class="line">      &#x2F;&#x2F; 将 state 上的每个属性，都转化为 ref 形式的响应式数据</span><br><span class="line">      ...toRefs(state),</span><br><span class="line">      &#x2F;&#x2F; 自增的事件处理函数</span><br><span class="line">      increment</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 在<code>template</code>中就直接可以使用<code>count</code>属性和相对应的<code>increment</code>方法了，如果没有使用<code>roRefs</code>直接返回<code>state</code>那么就得通过<code>state.xx</code>来访问数据</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;span&gt;当前的count值为：&#123;&#123;count&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;increment&quot;&gt;add&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><h2 id="computed与watch（计算属性与监听）"><a href="#computed与watch（计算属性与监听）" class="headerlink" title="computed与watch（计算属性与监听）"></a>computed与watch（计算属性与监听）</h2><ol><li><p><code>computed()</code> 用来创建计算属性，<code>computed()</code> 函数的返回值是一个 ref 的实例。使用 <code>computed</code> 之前需要按需导入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; computed &#125; from &#39;@vue&#x2F;composition-api&#39;</span><br></pre></td></tr></table></figure><ol><li><p>创建只读的计算属性，在调用<code>computed()</code>函数的时候，传入一个<code>function</code>函数，可以得到一个只读的计算属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建一个响应式数据</span><br><span class="line">const count &#x3D; ref(1) </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 根据count的值创建一个响应式的计算属性， 它会根据ref自动计算并且返回一个新的ref</span><br><span class="line">const computedCount &#x3D; computed(() &#x3D;&gt; count.value + 1 ) </span><br><span class="line"></span><br><span class="line">console.log(computedCount.value) &#x2F;&#x2F; 打印 2</span><br><span class="line"></span><br><span class="line">computedCount.value++ &#x2F;&#x2F;报错</span><br></pre></td></tr></table></figure></li><li><p>创建可读可写的计算属性</p><p>在调用<code>computed()</code>函数的时候传入一个包含<code>get</code>和<code>set</code>的对象，就可以得到一个可读可写的计算属性了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建一个响应式数据</span><br><span class="line">const count &#x3D; ref(1) </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 根据count的值创建一个响应式的计算属性， 它会根据ref自动计算并且返回一个新的ref</span><br><span class="line">const computedCount &#x3D; computed(&#123;</span><br><span class="line">    get: () &#x3D;&gt; count.value + 1,</span><br><span class="line">    set: (val) &#x3D;&gt; count.value &#x3D; val - 1</span><br><span class="line">&#125; ) </span><br><span class="line"></span><br><span class="line">computedCount.count &#x3D; 6</span><br><span class="line"></span><br><span class="line">console.log(count.value) &#x2F;&#x2F; 打印 5</span><br></pre></td></tr></table></figure></li></ol><p>2.<code>watch()</code> 函数用来监听数据的变化，跟<code>vue2.x</code>中的是一样的不过在这得像<code>computed</code>的使用方法一样导入相关<code>api</code>方法</p><p>使用前导入 <code>import { watch } from &#39;@vue/composition-api&#39;</code></p><ol><li><p>基本用法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const count &#x3D; ref(0)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 定义watch只要count的值变化，就会触发watch的回调</span><br><span class="line">&#x2F;&#x2F; watch 会在创建的时候自动调用一次</span><br><span class="line"></span><br><span class="line">watch(() &#x3D;&gt; console.log(count.value))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">    count.value++</span><br><span class="line">&#125;, 1000)</span><br></pre></td></tr></table></figure></li><li><p>监听指定数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F; 定义reactive数据源</span><br><span class="line">const state &#x3D; reactive(&#123; count: 0 &#125;)</span><br><span class="line">&#x2F;&#x2F; 监视 state.count 这个数据节点的变化</span><br><span class="line">watch(() &#x3D;&gt; state.count, (now, prev) &#x3D;&gt; &#123; </span><br><span class="line">    console.log(now, prev)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F; 定义ref数据源</span><br><span class="line">const count &#x3D; ref(0)</span><br><span class="line">&#x2F;&#x2F; 监视count这个数据的变化</span><br><span class="line">watch(count, (now, prev) &#x3D;&gt; &#123; </span><br><span class="line">    console.log(now, prev)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="LifeCycle-Hooks-生命周期"><a href="#LifeCycle-Hooks-生命周期" class="headerlink" title="LifeCycle Hooks(生命周期)"></a>LifeCycle Hooks(生命周期)</h2><p>在新版中的生命周期需要按需导入，并且只能写<code>setup()</code>函数中。</p></li></ol></li></ol></li></ol><p>使用<code>onBeforeMount</code>, <code>onMounted</code>, <code>updated</code>相关生命周期，使用前导入相关<code>api</code>方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; onBeforeMount, onMounted, updated &#125; from &#39;@vue&#x2F;composition-api&#39;</span><br></pre></td></tr></table></figure> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">setup () &#123;</span><br><span class="line">   onBeforeMount(() &#x3D;&gt; &#123;</span><br><span class="line">     console.log(&#39;onBeforeMount!&#39;)</span><br><span class="line">   &#125;)</span><br><span class="line">   onMounted(() &#x3D;&gt; &#123;</span><br><span class="line">     console.log(&#39;onMounted!&#39;)</span><br><span class="line">   &#125;)</span><br><span class="line">   updated(() &#x3D;&gt; &#123;</span><br><span class="line">     console.log(&#39;updated!&#39;)</span><br><span class="line">   &#125;) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 相关每个生命周期方法都是传入一个<code>function</code>函数。</p><p> <code>vue2.x</code>与新版<code>Composition API</code>之间的映射关系</p><ul><li><code>beforeCreate</code> -&gt; <code>setup</code></li><li><code>created</code> -&gt; <code>setup</code></li><li><code>beforeMount</code> -&gt; <code>onBeforeMount</code></li><li><code>mounted</code> -&gt; <code>onMounted</code></li><li><code>beforeUpdate</code> -&gt; <code>onBeforeUpdate</code></li><li><code>updated</code> -&gt; <code>onUpdated</code></li><li><code>beforeDestroy</code> -&gt; <code>onBeforeUnmount</code></li><li><code>destroyed</code> -&gt; <code>onUnmounted</code></li><li><code>errorCaptured</code> -&gt; <code>onErrorCaptured</code></li></ul><h2 id="provide-amp-inject（数据共享）"><a href="#provide-amp-inject（数据共享）" class="headerlink" title="provide &amp; inject（数据共享）"></a>provide &amp; inject（数据共享）</h2><p><code>provide()</code>和 <code>inject()</code>可以实现嵌套组件之间的数据传递。这个两个函数只能在<code>setup()</code>函数中使用。父级组件中使用<code>provide()</code>函数可以使数据向下传递，子组件中使用<code>inject()</code>接收上层传过来的数据。</p><p>实现代码:</p><p>根组件（父组件）<code>parent.vue</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;child-one&gt;&lt;&#x2F;child-one&gt;</span><br><span class="line">    &lt;child-two&gt;&lt;&#x2F;child-two&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import &#123; provide &#125; from &#39;@vue&#x2F;composition-api&#39;</span><br><span class="line">  import ChildOne from &#39;@&#x2F;components&#x2F;Child&#39;</span><br><span class="line">  import ChildTwo from &#39;@&#x2F;components&#x2F;Child&#39;</span><br><span class="line">  export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">       ChildOne,</span><br><span class="line">       ChildTwo</span><br><span class="line">    &#125;,</span><br><span class="line">    setup() &#123;</span><br><span class="line">    &#x2F;&#x2F; provide(&#39;要共享的数据名称&#39;, 被共享的数据)</span><br><span class="line">      provide(&#39;globalName&#39;, &#39;vue&#39;) </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>子组件1 <code>ChildOne.vue</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!--页面展示数据globalName --&gt;</span><br><span class="line">    &#123;&#123;globalName&#125;&#125; </span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import &#123; inject &#125; from &#39;@vue&#x2F;composition-api&#39;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#39;ChildOne&#39;,</span><br><span class="line">    setup() &#123;</span><br><span class="line">      const globalName &#x3D; inject(&#39;globalName&#39;) 调用 inject 函数时，通过指定的数据名称，获取到父级共享的数据</span><br><span class="line">      return &#123;</span><br><span class="line">        globalName</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>子组件2 <code>ChildTwo.vue</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!--页面展示数据globalName --&gt;</span><br><span class="line">    &#123;&#123;globalName&#125;&#125; </span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import &#123; inject &#125; from &#39;@vue&#x2F;composition-api&#39;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#39;ChildTwo&#39;,</span><br><span class="line">    setup() &#123;</span><br><span class="line">      const globalName &#x3D; inject(&#39;globalName&#39;) 调用 inject 函数时，通过指定的数据名称，获取到父级共享的数据</span><br><span class="line">      return &#123;</span><br><span class="line">        globalName</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p><code>provide</code>函数被共享的数据可以使<code>ref</code>和<code>reactive</code>定义的响应式数据，用法类似</p><h2 id="template-refs（元素组件）"><a href="#template-refs（元素组件）" class="headerlink" title="template refs（元素组件）"></a>template refs（元素组件）</h2><p>我们知道在<code>vue2.x</code>中获取页面元素的<code>DOM</code>可以通过<code>ref</code>写在页面元素上然后在<code>js</code>中通过<code>$refs.x</code>来拿取当前元素的<code>DOM</code>元素信息，操作<code>DOM</code>,在<code>composition-api</code>中我们通过提供的<code>ref</code>方法传入一个<code>null</code>并且定义与页面元素上<code>ref</code>相对应。</p><p>代码实现： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1 ref&#x3D;&quot;h1Ref&quot;&gt;Hello Word&lt;&#x2F;h1&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; ref, onMounted &#125; from &#39;@vue&#x2F;composition-api&#39;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    &#x2F;&#x2F; 创建一个 DOM 引用</span><br><span class="line">    const h1Ref &#x3D; ref(null)</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 在 DOM 首次加载完毕之后，才能获取到元素的引用</span><br><span class="line">    onMounted(() &#x3D;&gt; &#123;</span><br><span class="line">      &#x2F;&#x2F; 为 dom 元素设置字体颜色</span><br><span class="line">      &#x2F;&#x2F; h1Ref.value 是原生DOM对象</span><br><span class="line">      console.log(h1Ref.value)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 把创建的引用 return 出去</span><br><span class="line">    return &#123;</span><br><span class="line">      h1Ref</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>&ensp;&ensp;&ensp;&ensp;感觉<code>composition-api</code>都是以导入的形式使用，感觉没有直接<code>vue2.x</code>中直接使用的方便哈😂。虽然都是说按需引入，使用想用的方法。对比了与<code>vue2.x</code>的各种写法感觉突然转过来有很大不适应，写的各种数据方法都要在<code>setup</code>的入口函数中导出才能在页面上使用。虽然<code>vue2.x</code>定义的数据也需要通过<code>data</code>函数返回值然后在页面中使用，但是方法不用啊，什么计算属性监听也都是不用的啊。可能是自己适应了<code>vue2.x</code>的各种写法，感觉用起来各种爽。转变到<code>vue3.x</code>也就是现在的<code>composition-api</code>还需要点时间。</p><p>最后自己还是有个问题没有解决有大佬给我思路吗？就是子父组件的通信怎么写？之前版本是通过<code>$emit</code>进行，我发现这<code>setup</code>函数中写了父组件拿不到。</p><p>最后贴上<code>composition-api</code>官方文档</p><p><a href="https://vue-composition-api-rfc.netlify.com" target="_blank" rel="noopener">https://vue-composition-api-rfc.netlify.com</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2020/1/13/16f9e71255c62bc0?w=299&amp;h=300&amp;f=png&amp;s=43799&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class
      
    
    </summary>
    
    
      <category term="Web前端" scheme="http://jetBn.github.io/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue" scheme="http://jetBn.github.io/categories/Web%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>Shopify插件开发入坑体验</title>
    <link href="http://jetbn.github.io/2020/04/29/Shopify%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E5%85%A5%E5%9D%91%E4%BD%93%E9%AA%8C/"/>
    <id>http://jetbn.github.io/2020/04/29/Shopify%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E5%85%A5%E5%9D%91%E4%BD%93%E9%AA%8C/</id>
    <published>2020-04-29T02:58:15.000Z</published>
    <updated>2020-04-29T04:15:37.377Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://user-gold-cdn.xitu.io/2020/1/16/16facfbcc2c3ad20?w=500&h=144&f=png&s=18435" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&ensp;&ensp;&ensp;&ensp;由于公司的需求开发<code>Shopify</code>的应用插件自己特地记录下。简单的介绍下<code>Shopify</code>,它是由托比亚斯·卢克创办的加拿大电子商务软件开发商，总部位于加拿大首都渥太华，其提供的服务软件<code>Shopify</code>是一个<code>SaaS</code>领域的购物车系统，适合跨境电商建立独立站，用户支付一定费用即可在其上利用各种主题/模板建立自己的网上商店。</p><p>&ensp;&ensp;&ensp;&ensp;由于是国外的官网文档也都是英文，看起来有点吃力哦（小生英文水平有限🤣🤣）。不过之后应该有中文了现在很多页面有中文了已经。</p><p>&ensp;&ensp;&ensp;&ensp;该应该用插件官方推荐是用<code>React</code>的<code>next.js</code>服务端渲染框架以及<code>node.js</code>作为后端语言使用<code>GraphQL</code>开发。作为没接触过<code>GraphQL</code>的我赶紧补了一波知识。后来我一路跌跌撞撞终于现在是了解了一个大概。最终我还是使用<code>node</code>作为主入口程序，验证应用插件获取相关的<code>access_token</code>和商店地址。剩下的请求什么<code>Shopify</code>接口也没有用<code>GraphQL</code>而是使用了<code>ResfulApi</code>让后端工作人员去操作了，然后我请求后端接口进行一系列操作。（最后熟悉了，什么验证都是丢给后端操作了，前端我也就可以使用各种框架了而不是单单只能使用<code>next.js</code>）。</p><h2 id="注册获取开发前提要素"><a href="#注册获取开发前提要素" class="headerlink" title="注册获取开发前提要素"></a>注册获取开发前提要素</h2><ol><li>创建<code>Shopify</code>开发者账号<br><img src="https://user-gold-cdn.xitu.io/2020/1/16/16fadd29cd892624?w=1477&h=599&f=png&s=141044" alt=""><br>如图在<a href="https://developers.shopify.com/" target="_blank" rel="noopener">https://developers.shopify.com/</a>网站注册相关的账号。</li><li>在相关<code>partners</code>的页面创建商店(以供后面开发应用使用)以及应用<br><img src="https://user-gold-cdn.xitu.io/2020/1/16/16fadd983d275ceb?w=1579&h=744&f=jpeg&s=164230" alt=""><ol><li>在创建应用的有自定义应用和公共应用如图：<br> <img src="https://user-gold-cdn.xitu.io/2020/1/16/16faddc034ed8c10?w=965&h=849&f=png&s=60560" alt=""><br> 一般我相信我我们都是创建的公共应用，到目前我开发的应用也都是公共类型，在创建应用的时候<code>URL</code>和相关的重定向<code>URL</code>都是必须写的因为我也没有注册域名啥的吧，所以此时是用了<code>ngrok</code>内网穿透，在官方的开发介绍中也是使用这个。在此我们填写的<code>URL</code>就要和你使用<code>ngrok</code>暴露出去的地址对应了，不过使用<code>node</code>的<code>koa</code>框架有个专门的中间件也是官方使用的重定向地址都是域名后加上了<code>shopify/auth</code> 例如：  URL:<code>https://30aca829.ngrok.io</code>, 重定向URL:<code>https://30aca829.ngrok.io/shopify/auth/</code>（电脑重启重新暴露出去这个连个地址都是要重新填一遍，然后<code>koa</code>的中间件就会跳转到<code>https://30aca829.ngrok.io/shopify/auth/</code>进行相关的验证操作。（这在后面的入口）。序中会上代码，然后在后期我们没有用<code>koa</code>作为入口这个地址也是可以自己想怎么填就怎么填）。</li><li>创建完成（拿取相关的密钥很重要！！很重要！！作为开发读取数据和请求官方<code>api</code>使用）<br> <img src="https://user-gold-cdn.xitu.io/2020/1/16/16fade6ef2e35432?w=496&h=355&f=png&s=19659" alt=""><br> 差不多了前提就这些步骤，注册成功之后填写好接下来就是一系列代码操作了。</li></ol></li></ol><h2 id="编写开发环境程序"><a href="#编写开发环境程序" class="headerlink" title="编写开发环境程序"></a>编写开发环境程序</h2><ol><li><p>创建项目目录（sample-app），并使用<code>npm</code>初始化项目目录 </p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure></li><li><p>安装相关依赖</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save react react-dom next</span><br></pre></td></tr></table></figure></li><li><p>因为是用<code>next.js</code>所以不熟悉的还得看看官方文档 <a href="https://nextjs.frontendx.cn/" target="_blank" rel="noopener">https://nextjs.frontendx.cn/</a></p><p> 创建文件<code>pages</code>并在下面新建<code>index.js</code></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const Index &#x3D; () &#x3D;&gt; (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;Sample app using React and Next.js&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">export default Index;</span><br></pre></td></tr></table></figure><p> 添加相关运行命令打开<code>package.json</code>文件添加</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</span><br><span class="line">    &quot;dev&quot;: &quot;next&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;next build&quot;,</span><br><span class="line">    &quot;start&quot;: &quot;next start&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 运行开发环境</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p> 到这里应该是创建一个<code>next.js</code>项目然后接下来对接到<code>Shopify</code></p></li><li><p>使用<code>ngrok</code>暴露出去自己的<code>3000</code>端口因为<code>next.js</code>启动的默认是<code>3000</code>端口</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ngrok http 3000</span><br></pre></td></tr></table></figure><p> <img src="https://user-gold-cdn.xitu.io/2020/1/17/16fb29415dbff038?w=976&h=519&f=png&s=30962" alt=""><br> 然后在自己创建的应用中设置中添加<code>对应的url</code>（得用<code>https</code>的）就在上面所说的填写<code>url</code></p></li><li><p>使用<code>node</code>的 <code>koa</code>来进行渲染页面操作</p><ol><li><p>创建<code>env</code>环境变量文件并写入在上面创建的应用的<code>KEY</code></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHOPIFY_API_KEY&#x3D;&#39;YOUR API KEY FROM SHOPIFY PARTNERS DASHBOARD&#39;</span><br><span class="line">SHOPIFY_API_SECRET_KEY&#x3D;&#39;YOUR API SECRET KEY FROM SHOPIFY PARTNERS DASHBOARD&#39;</span><br></pre></td></tr></table></figure></li><li><p>安装相关<code>Shopify</code>的验证<code>koa</code>中间件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save koa @shopify&#x2F;koa-shopify-auth dotenv koa-session isomorphic-fetch</span><br></pre></td></tr></table></figure></li><li><p>创建<code>server.js</code>写入相关验证代码</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">require(&#39;isomorphic-fetch&#39;);</span><br><span class="line">const dotenv &#x3D; require(&#39;dotenv&#39;);</span><br><span class="line">const Koa &#x3D; require(&#39;koa&#39;);</span><br><span class="line">const next &#x3D; require(&#39;next&#39;);</span><br><span class="line">const &#123; default: createShopifyAuth &#125; &#x3D; require(&#39;@shopify&#x2F;koa-shopify-auth&#39;);</span><br><span class="line">const &#123; verifyRequest &#125; &#x3D; require(&#39;@shopify&#x2F;koa-shopify-auth&#39;);</span><br><span class="line">const session &#x3D; require(&#39;koa-session&#39;);</span><br><span class="line"></span><br><span class="line">dotenv.config();</span><br><span class="line">&#x2F;&#x2F; graphql的相关中间件</span><br><span class="line">const &#123; default: graphQLProxy &#125; &#x3D; require(&#39;@shopify&#x2F;koa-shopify-graphql-proxy&#39;); </span><br><span class="line">const &#123; ApiVersion &#125; &#x3D; require(&#39;@shopify&#x2F;koa-shopify-graphql-proxy&#39;);</span><br><span class="line"></span><br><span class="line">const port &#x3D; parseInt(process.env.PORT, 10) || 3000;</span><br><span class="line">const dev &#x3D; process.env.NODE_ENV !&#x3D;&#x3D; &#39;production&#39;;</span><br><span class="line">const app &#x3D; next(&#123; dev &#125;);</span><br><span class="line">const handle &#x3D; app.getRequestHandler();</span><br><span class="line"></span><br><span class="line">const &#123; SHOPIFY_API_SECRET_KEY, SHOPIFY_API_KEY &#125; &#x3D; process.env; &#x2F;&#x2F; 环境变量里读取 api-key与api-secret-key</span><br><span class="line">app.prepare().then(() &#x3D;&gt; &#123;</span><br><span class="line">  const server &#x3D; new Koa();</span><br><span class="line">  server.use(session(server));</span><br><span class="line">  server.keys &#x3D; [SHOPIFY_API_SECRET_KEY];</span><br><span class="line"></span><br><span class="line">  server.use(</span><br><span class="line">    createShopifyAuth(&#123;</span><br><span class="line">      apiKey: SHOPIFY_API_KEY,</span><br><span class="line">      secret: SHOPIFY_API_SECRET_KEY, </span><br><span class="line">      scopes: [&#39;read_products&#39;, &#39;write_products&#39;], &#x2F;&#x2F;填写相关应用api相关请求的权限</span><br><span class="line">      afterAuth(ctx) &#123;</span><br><span class="line">        const &#123; shop, accessToken &#125; &#x3D; ctx.session; &#x2F;&#x2F; 通过session拿取相关商店地址以及请求api需要的accessToken</span><br><span class="line">        ctx.cookies.set(&#39;shopOrigin&#39;, shop, &#123; httpOnly: false &#125;); </span><br><span class="line">        ctx.redirect(&#39;&#x2F;&#39;); &#x2F;&#x2F; 重定向到index首页</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  server.use(verifyRequest());</span><br><span class="line">  server.use(async (ctx) &#x3D;&gt; &#123;</span><br><span class="line">    await handle(ctx.req, ctx.res);</span><br><span class="line">    ctx.respond &#x3D; false;</span><br><span class="line">    ctx.res.statusCode &#x3D; 200;</span><br><span class="line">    return</span><br><span class="line">  &#125;);</span><br><span class="line">  server.use(graphQLProxy(&#123;version: ApiVersion.October19&#125;)) &#x2F;&#x2F; 这里填写相关api的版本</span><br><span class="line"></span><br><span class="line">  server.listen(port, () &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#96;&gt; Ready on http:&#x2F;&#x2F;localhost:$&#123;port&#125;&#96;); &#x2F;&#x2F; 监听端口</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>修改<code>package.json</code>文件使用我们的<code>server.js</code>来启动项目</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</span><br><span class="line">    &quot;dev&quot;: &quot;node server.js&quot;,</span><br><span class="line">    &quot;start&quot;: &quot;NODE_ENV&#x3D;production node server.js&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;next build&quot;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 现在我们启动项目并且用<code>ngrok</code>暴露出去的域名就能看到</p><p> <img src="https://user-gold-cdn.xitu.io/2020/1/17/16fb2a914762cace?w=434&h=214&f=png&s=6256" alt=""><br> 这里还要在域名的<code>shop</code>填写我们的商店地址例如我自己的：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;e44132cd.ngrok.io&#x2F;auth&#x2F;inline?shop&#x3D;jetbn.myshopify.com</span><br></pre></td></tr></table></figure><p> 一切填写就绪之后一<code>enter</code>页面就自动跳转了。</p><p> 最后展示的页面：<br> <img src="https://user-gold-cdn.xitu.io/2020/1/17/16fb2af2f6b051c0?w=1317&h=551&f=png&s=32089" alt=""></p></li></ol></li></ol><h2 id="折腾其他框架尝试"><a href="#折腾其他框架尝试" class="headerlink" title="折腾其他框架尝试"></a>折腾其他框架尝试</h2><p>&ensp;&ensp;&ensp;&ensp;前前后后都是使用<code>React</code>的<code>next.js</code>开发了两三个应用，感觉就是开发的时候太麻烦了，总要内网穿透，而且展示的页面都是<code>Shopify</code>的的自己平台上，而且开发写完代码等它响应过来还很慢。就这原因我又开始折腾了寻求其他的方案看看有没有能在自己开发完了再到它那上面，而且让验证<code>Shopify</code>的一系列操作让我们的后端小哥来操作。最终我前端选择<code>Vue</code>并且验证都放后端了，这样我就能像平常开发<code>Vue</code>项一样了。</p><p>下面介绍下我纯前端进行<code>Shopify</code>的验证操作使用<code>vue</code>。（前提要素内网穿透，不过开发的时候不需要）</p><ol><li><p>添加安装应用路由</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   path: &#39;&#x2F;shopify&#x2F;install&#39;,</span><br><span class="line">   beforeEnter(to, _from, next) &#123;</span><br><span class="line">     if (to.query.shop) &#123;  &#x2F;&#x2F;要在域名后添加开发的商店地址</span><br><span class="line">         const shop &#x3D; to.query.shop,</span><br><span class="line">         scopes &#x3D; &#39;read_orders,read_products,write_products&#39;, &#x2F;&#x2F; api权限</span><br><span class="line">         &#x2F;&#x2F; 重定向地址就是在创建应用的时候填写的第二个（重定向URL可以自己随意写了），我这里是域名加&#x2F;shopify&#x2F;auth</span><br><span class="line">         redirect_uri &#x3D; &#39;https:&#x2F;&#x2F;&#39; + process.env.VUE_APP_ROOT_URL + &#39;&#x2F;shopify&#x2F;auth&#39;, </span><br><span class="line">         &#x2F;&#x2F; 拼接安装应用地址需要SHOPIFY_API_KEY我填写在我的.env文件中了</span><br><span class="line">         install_url &#x3D;</span><br><span class="line">               &#39;http:&#x2F;&#x2F;&#39; + shop + &#39;&#x2F;admin&#x2F;oauth&#x2F;authorize?client_id&#x3D;&#39; +</span><br><span class="line">               process.env.VUE_APP_SHOPIFY_API_KEY +</span><br><span class="line">               &#39;&amp;scope&#x3D;&#39; + scopes + &#39;&amp;redirect_uri&#x3D;&#39; + redirect_uri</span><br><span class="line">       &#x2F;&#x2F; 本地跳转安装地址</span><br><span class="line">       window.location &#x3D; install_url</span><br><span class="line">     &#125; else &#123;</span><br><span class="line">       next(&#123; path: &#39;&#x2F;error&#39; &#125;)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure></li><li><p>重定向验证路由</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: &#39;&#x2F;shopify&#x2F;auth&#39;,</span><br><span class="line">  beforeEnter(to, _from, next) &#123;</span><br><span class="line">  &#x2F;&#x2F; 通过回调的url获取相关的参数</span><br><span class="line">    const shop &#x3D; to.query.shop,</span><br><span class="line">      hmac &#x3D; to.query.hmac,</span><br><span class="line">      code &#x3D; to.query.code</span><br><span class="line">  &#x2F;&#x2F; 使用SHOPIFY_API_SECRET_KEY验证 并且之后拿取access_token（这步没写）</span><br><span class="line">    if (shop &amp;&amp; hmac &amp;&amp; code) &#123;</span><br><span class="line">      const map &#x3D; Object.assign(&#123;&#125;, to.query)</span><br><span class="line">      delete map[&#39;signature&#39;]</span><br><span class="line">      delete map[&#39;hmac&#39;]</span><br><span class="line">      const message &#x3D; querystring.stringify(map)</span><br><span class="line">      const encrypted &#x3D;</span><br><span class="line">        crypto.createHmac(&#39;sha256&#39;, process.env.VUE_APP_SHOPIFY_API_SECRET_KEY)</span><br><span class="line">              .update(message)</span><br><span class="line">              .digest(&#39;hex&#39;)</span><br><span class="line">      &#x2F;&#x2F; const providedHmac &#x3D;  Buffer.from(hmac, &#39;utf-8&#39;)</span><br><span class="line">      &#x2F;&#x2F; const generatedHash &#x3D; Buffer.from(encrypted, &#39;utf-8&#39;)</span><br><span class="line">    </span><br><span class="line">      let hashEquals &#x3D; false</span><br><span class="line">    </span><br><span class="line">      try &#123;</span><br><span class="line">        &#x2F;&#x2F; later: Auth fails with &#96;crypto.timingSafeEqual&#96;</span><br><span class="line">        &#x2F;&#x2F; hashEquals &#x3D; crypto.timingSafeEqual(generatedHash, providedHmac)</span><br><span class="line">        hashEquals &#x3D; hmac &#x3D;&#x3D;&#x3D; encrypted</span><br><span class="line">      &#125; catch (e) &#123;</span><br><span class="line">        hashEquals &#x3D; false</span><br><span class="line">      &#125;</span><br><span class="line">    </span><br><span class="line">      if (!hashEquals) &#123;</span><br><span class="line">        next(&#123; path: &#39;&#x2F;error&#39; &#125;)</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        next(&#39;&#x2F;&#39;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      next(&#123; path: &#39;&#x2F;error&#39; &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <code>Vue</code>这相关的验证方案也是从<code>Github</code>上面捞的，特地记录下。具体地址忘了，有需要自己可以搜搜。🤣</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&ensp;&ensp;&ensp;&ensp;经过一段时间的熟悉，自己也算又掌握一项新东西了。刚开始这个<code>Shopify</code>插件应用开发真的是巨坑啊，虽然官方有文档流程，但是都是英文的而且基础的搭建都是<code>api</code>都是用<code>GraphQL</code>然后我自己尝试了都是各种超时操作，请求不到最后就自己弃用了，用<code>ResfulApi</code>。然后就是遇到问题啊啥的都跟本搜不到，我想着这也太难了我，然后只能硬着头皮去官方文档里找，最后到现在也算是起起伏伏终于都熟悉了，搞懂了。</p><p>&ensp;&ensp;&ensp;&ensp; 这之后发现了英文水平太重要了。虽然开发文档基本内容能看懂，但是都是半猜半疑的，然后翻译一波。（各种不准确），然后开始补英文吧。🤞</p><p>&ensp;&ensp;&ensp;&ensp;  最后放上几个<code>Shopify</code>开发常用的官方文档地址：</p><p>&ensp;&ensp;&ensp;&ensp;Shopify Partners(创建应用查看应用):  <a href="https://vue-composition-api-rfc.netlify.com" target="_blank" rel="noopener">https://vue-composition-api-rfc.netlify.com</a></p><p>&ensp;&ensp;&ensp;&ensp;Shopify Developers(官方开发文档):   <a href="https://developers.shopify.com" target="_blank" rel="noopener">https://developers.shopify.com</a>（搭建参考文档）</p><p>&ensp;&ensp;&ensp;&ensp;Shopify Polaris(官方UI框架):   <a href="https://polaris.shopify.com" target="_blank" rel="noopener">https://developers.shopify.com</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2020/1/16/16facfbcc2c3ad20?w=500&amp;h=144&amp;f=png&amp;s=18435&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class
      
    
    </summary>
    
    
      <category term="Web前端" scheme="http://jetBn.github.io/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="React" scheme="http://jetBn.github.io/categories/Web%E5%89%8D%E7%AB%AF/React/"/>
    
    
  </entry>
  
  <entry>
    <title>mpvue入坑记录</title>
    <link href="http://jetbn.github.io/2020/04/29/mpvue%E5%85%A5%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    <id>http://jetbn.github.io/2020/04/29/mpvue%E5%85%A5%E5%9D%91%E8%AE%B0%E5%BD%95/</id>
    <published>2020-04-29T02:57:09.000Z</published>
    <updated>2020-04-29T04:16:27.532Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用MpVue开发小程序记录"><a href="#使用MpVue开发小程序记录" class="headerlink" title="使用MpVue开发小程序记录"></a>使用MpVue开发小程序记录</h2><p>&#160; &#160; &#160; &#160; 当下轻应用，遍布各大互联网公司。像百度、支付宝、微信、字节都是有自己的小程序形式，就现在QQ也推出了小程序的形式，像这种轻应用又不需要安装，就能打开，而且也类似了app形式。当然相对于形式也不能说不会开发吧，该学的还是得学。所以现在也有很多基于框架延伸而出的打包生成多个平台的小程序，例如 基于react的taro、还有wepy、mpvue目前应该这个三个最火热了，然后我尝试了mpvue开发了过程不说坑还是有的。自己也是一步步解决，所以决定记录一下。</p><ol><li><p>首先就搭建了项目使用相关环境自己也是全部尝试了一遍安装了<code>scss</code>环境以及<code>vuex</code>，好像有解决的<code>vue-router</code>自己没有尝试.</p><p>1.1  首先讲下<code>scss</code>的<code>mixin</code>我在全局的时候引入在页面页面中能用，为什么在组件中用不了这是啥我也不是清楚。还有就是我在<code>scss</code>中使用<code>font</code>字体的问题，在此中我通过本地的方式引入发现就是加载不了，后来寻找方案在交流群中得知是得将文件放在<code>static</code>文件下并且使用绝对路径的方式引用，是有效不报错了。但是小程序打包又上传了不了，后来我就直接干脆放服务器上了，再通过引用，这下总没问题了。</p><p>1.2 再次就是<code>vuex</code>在<code>main.js</code>中引用在<code>vue</code>的原型上加而不是像<code>vue-cli</code>中使用一样 直接写在<code>new VUE</code>中。</p><p>在main.js中定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import App from &#39;.&#x2F;App&#39;</span><br><span class="line">import store from &#39;.&#x2F;store&#39;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip &#x3D; false</span><br><span class="line">App.mpType &#x3D; &#39;app&#39;</span><br><span class="line">Vue.prototype.$store &#x3D; store</span><br><span class="line"></span><br><span class="line">const app &#x3D; new Vue(App)</span><br><span class="line">app.$mount()</span><br></pre></td></tr></table></figure><p>在页面中使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$store.state</span><br></pre></td></tr></table></figure><p>也可以使用vuex的mapState引用某个state</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 头部导入</span><br><span class="line">import &#123; mapState &#125; from &#39;vuex&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 在计算属性中</span><br><span class="line"></span><br><span class="line">...mapState([</span><br><span class="line">  &#39;carBrandCityPrev&#39; &#x2F;&#x2F; 对应stae中定义的</span><br><span class="line">]),</span><br></pre></td></tr></table></figure></li><li><p>自定义TabBar自己刚开始使用也是一头水雾，微信小程序更新的很快。我之前写的一个小程序用的是原生开发的时候，那时候还没有什么定义TabBar啊、导航栏、组件啊什么的。后来我也是看了下官方的demo以及github中mpuve项目的issue中找解决方案，最终还是直接上手搞了一波。中途也是坎坎坷坷。</p><blockquote><p>贴个自定义tabbar地址: <a href="https://github.com/jetBn/mpvue-custom-tab-bar" target="_blank" rel="noopener">https://github.com/jetBn/mpvue-custom-tab-bar</a></p></blockquote></li><li><p>小程序中获取地理位置授权问题，只有在第一次进入的会提示是否授权如果拒绝了授权第二进入都不会授权，都会走授权位置的<code>fail</code>方法,所以这个原因问题。我们只能是通过微信的获取用户的当前设置检查 <code>wx.getSetting</code>api去检查当前是否授权，通过此方法放在<code>fail</code>方法中检测当前是否开启授权地理位置，如果没有重新调用地理位置授权的方法。</p><p> 相关检查是否授权方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; fn指相关重新授权的方法</span><br><span class="line">  export function checkGetLocationPermison (fn) &#123;</span><br><span class="line">    wx.getSetting(&#123;</span><br><span class="line">      success: (res) &#x3D;&gt; &#123;</span><br><span class="line">        const status &#x3D; res.authSetting</span><br><span class="line">        if (!status[&#39;scope.userLocation&#39;]) &#123;</span><br><span class="line">          wx.showModal(&#123;</span><br><span class="line">            title: &#39;是否授权当前位置&#39;,</span><br><span class="line">            content: &#39;需要获取您的地理位置，请确认授权，否则地图功能将无法使用获取不了优惠券信息&#39;,</span><br><span class="line">            success: (subRes) &#x3D;&gt; &#123;</span><br><span class="line">              if (subRes.confirm) &#123;</span><br><span class="line">                wx.openSetting(&#123;</span><br><span class="line">                  success: (subRes) &#x3D;&gt; &#123;</span><br><span class="line">                    if (subRes.authSetting[&#39;scope.userLocation&#39;] &#x3D;&#x3D;&#x3D; true) &#123;</span><br><span class="line">                      wx.showToast(&#123;</span><br><span class="line">                        title: &#39;授权成功&#39;,</span><br><span class="line">                        icon: &#39;success&#39;,</span><br><span class="line">                        duration: 1000</span><br><span class="line">                      &#125;)</span><br><span class="line">                      fn()</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                      wx.showToast(&#123;</span><br><span class="line">                        title: &#39;授权失败&#39;,</span><br><span class="line">                        icon: &#39;success&#39;,</span><br><span class="line">                        duration: 1000</span><br><span class="line">                      &#125;)</span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      fail: () &#x3D;&gt; &#123;</span><br><span class="line">        wx.showToast(&#123;</span><br><span class="line">          title: &#39;调用授权窗口失败&#39;,</span><br><span class="line">          icon: &#39;success&#39;,</span><br><span class="line">          duration: 1000</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>在mpvue是axios全局处理请求返回值以及请求头设置等等。在<code>npm i axios qs</code>后新建<code>request.js</code>文件，引入<code>qs</code>处理<code>axios</code>中post请求，然后微信小程序中是使用<code>wx.request</code>发送请求的并不是直接使用axios就可以的，所以使用<code>axios</code>的<code>adapter</code> 属性进行我们的请求操作。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建axios实例</span><br><span class="line">const Axios &#x3D; axios.create(&#123;</span><br><span class="line">  baseURL: &#39;&#39;, &#x2F;&#x2F; 设置请求域名地址</span><br><span class="line">  timeout: 1000 * 60 * 10, &#x2F;&#x2F; 设置请求超时时间</span><br><span class="line">  responseType: &#39;json&#39; &#x2F;&#x2F; 设置返回值类型</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 然后使用Axios实例的adapter进行封装微信请求</span><br><span class="line">Axios.defaults.adapter &#x3D; (config) &#x3D;&gt; &#123;</span><br><span class="line">  return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">    let data &#x3D; config.method &#x3D;&#x3D;&#x3D; &#39;get&#39; ? config.params : qs.stringify(config.params)</span><br><span class="line">    wx.request(&#123;</span><br><span class="line">      url: config.url,</span><br><span class="line">      method: config.method,</span><br><span class="line">      header: &#123;&#39;Content-type&#39;: &#39;application&#x2F;x-www-form-urlencoded&#39;&#125;,</span><br><span class="line">      data,</span><br><span class="line">      success: (res) &#x3D;&gt; (resolve(res)),</span><br><span class="line">      fail: (err) &#x3D;&gt; (reject(err))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 请求拦截</span><br><span class="line">Axios.interceptors.request.use((request) &#x3D;&gt; &#123;</span><br><span class="line">  return request</span><br><span class="line">&#125;, (error) &#x3D;&gt; &#123;</span><br><span class="line">  return Promise.reject(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 响应拦截</span><br><span class="line">Axios.interceptors.response.use((response) &#x3D;&gt; &#123;</span><br><span class="line">    return response</span><br><span class="line">&#125;, (error) &#x3D;&gt; &#123;</span><br><span class="line">     return Promise.reject(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 导出响应的方法</span><br><span class="line">export function fetch (options) &#123;</span><br><span class="line">  return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">    Axios(options)</span><br><span class="line">      .then(response &#x3D;&gt; &#123;</span><br><span class="line">        resolve(response)</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(error &#x3D;&gt; &#123;</span><br><span class="line">        reject(error)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>相关自定义头部导航栏根据相关设备判断设置高度，相关计算是顶部状态栏的高度加上相关定义的高度。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;微信获取相关设备信息的API</span><br><span class="line">wx.getSystemInfo(&#123;</span><br><span class="line">  success (system) &#123;</span><br><span class="line">    &#x2F;&#x2F; console.log(&#96;system:&#96;, system)</span><br><span class="line">    self.statusBarHeight &#x3D; system.statusBarHeight</span><br><span class="line">    self.platform &#x3D; system.platform</span><br><span class="line">    const windowHeight &#x3D; system.windowHeight</span><br><span class="line">    let platformReg &#x3D; &#x2F;ios&#x2F;i</span><br><span class="line">    if (platformReg.test(system.platform)) &#123;</span><br><span class="line">      self.titleBarHeight &#x3D; 44  &#x2F;&#x2F; iso的高度</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      self.titleBarHeight &#x3D; 48  &#x2F;&#x2F;android 的高度</span><br><span class="line">    &#125;</span><br><span class="line">    self.navBarHeight &#x3D; self.statusBarHeight + self.titleBarHeight</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>mpvue中使用组件式封装 然后是内容使用插槽形式，在使用组件的使用插槽内的内容数据更新页面不会实时更新 。（父组件插槽内容块中使用的也是组件封装的组件）（问题1）。然后我使用了 不封装组件 直接写页面样式点击组件的事件会触发插槽中的事件？？？（问题2） 事件跟插槽中的事件不在同一个div中。最后就是不用插槽才解决了上述问题1，2</p></li><li><p><code>npm run dev</code> 会卡在<code>node build/dev-server.js wx</code> 最后我自己也是在官方的github仓库中的<code>issu</code>中找到解决方案在build文件夹的<code>build.js</code>中<code>require(&#39;./check-versions&#39;)()</code>注释掉然后也就能正常运行了。具体的好像是在经过<code>check-versions</code>函数的时候执行特别的慢。</p></li></ol><p>&#160; &#160; &#160; &#160;最后总结下<code>MpVue</code>这个相对于<code>vue</code>针对于小程序的框架，大部分都是使用<code>vue</code>相关语法所以对于熟悉<code>vue</code>的来说还是很容易上手的。开发效率也还可以。感觉会使用<code>vue</code>再次熟悉微信小程序官方的API开发效率还是很高的，不过还是有挺多坑的，我这边坑可能是没有遇到很多。很幸运，具体的相关的语法情况可以对应官方网站的介绍情况。</p><p>&#160; &#160; &#160; &#160;最后附上相关网站地址：</p><p>&#160; &#160; &#160; &#160;官方网站：<a href="http://mpvue.com" target="_blank" rel="noopener">http://mpvue.com</a></p><p>&#160; &#160; &#160; &#160;github相关仓库地址： <a href="https://github.com/Meituan-Dianping/mpvue" target="_blank" rel="noopener">https://github.com/Meituan-Dianping/mpvue</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;使用MpVue开发小程序记录&quot;&gt;&lt;a href=&quot;#使用MpVue开发小程序记录&quot; class=&quot;headerlink&quot; title=&quot;使用MpVue开发小程序记录&quot;&gt;&lt;/a&gt;使用MpVue开发小程序记录&lt;/h2&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;
      
    
    </summary>
    
    
      <category term="Web前端" scheme="http://jetBn.github.io/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue" scheme="http://jetBn.github.io/categories/Web%E5%89%8D%E7%AB%AF/Vue/"/>
    
      <category term="小程序" scheme="http://jetBn.github.io/categories/Web%E5%89%8D%E7%AB%AF/Vue/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
  </entry>
  
</feed>
